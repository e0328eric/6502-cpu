const std = @import("std");

const Cpu = @import("pixeka").Cpu;
const ArrayList = std.ArrayList;

const parseHexDump = @import("../test_cpu.zig").parseHexDump;
const testing_allocator = std.testing.allocator;
const expect = std.testing.expect;

// The source code of which is in rule110.s
test "Rule 110" {
    const program_str =
        \\0600: a9 02 a2 00 85 86 86 85 a2 00 a9 01 85 6f 20 37
        \\0610: 06 a9 df c5 85 b0 0d a9 01 65 86 85 86 a9 00 85
        \\0620: 85 4c 2b 06 18 a9 20 65 85 85 85 20 4e 06 20 37
        \\0630: 06 e8 e0 1e 90 db 00 48 08 8a 48 a2 00 a0 00 b5
        \\0640: 50 91 85 e8 c8 e0 20 90 f6 68 aa 28 68 60 48 08
        \\0650: 8a 48 a9 4f 85 75 a9 00 85 76 a9 01 a2 00 e6 75
        \\0660: e8 a9 6e c5 75 f0 20 a0 00 a9 01 d1 75 f0 0c c8
        \\0670: b1 75 c8 11 75 88 95 30 4c 5e 06 c8 31 75 c8 51
        \\0680: 75 88 95 30 4c 5e 06 a9 01 85 4f a2 00 b5 30 95
        \\0690: 50 e8 e0 20 90 f7 68 aa 28 68 60
    ;
    const program = parseHexDump(program_str);

    var cpu = try Cpu.init(testing_allocator);
    defer cpu.deinit();

    try cpu.loadAndRunAt(.@"test", false, program);

    // expected registers
    try expect(cpu.reg_a == 0xC0);
    try expect(cpu.reg_x == 0x1E);
    try expect(cpu.reg_y == 0x20);

    // expected program counter
    try expect(cpu.pc == 0x0637);

    // check the memory state between $0200 ~ $05FF
    // rule110_table.txt is generated by using https://skilldrick.github.io/easy6502/
    // with rule110.s source code

    const rule110_memory_expected = parseHexDump(@embedFile("./rule110_table.txt"));

    for (rule110_memory_expected, cpu.bus.ram[0x200..0x600]) |expected, got| {
        try expect(expected == got);
    }
}
